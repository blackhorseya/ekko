// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package linebot

import (
	"github.com/blackhorseya/ekko/adapter/platform/wirex"
	"github.com/blackhorseya/ekko/app/domain/todo/biz"
	"github.com/blackhorseya/ekko/app/infra/authx"
	"github.com/blackhorseya/ekko/app/infra/configx"
	"github.com/blackhorseya/ekko/pkg/adapterx"
	"github.com/blackhorseya/ekko/pkg/linebotx"
	"github.com/blackhorseya/ekko/pkg/logging"
	"github.com/blackhorseya/ekko/pkg/transports/httpx"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func New(v *viper.Viper) (adapterx.Servicer, error) {
	application, err := initApplication()
	if err != nil {
		return nil, err
	}
	authxAuthx := authx.NewNil()
	iTodoBiz := biz.NewNilTodoBiz()
	injector := &wirex.Injector{
		A:     application,
		Authx: authxAuthx,
		Todo:  iTodoBiz,
	}
	server, err := httpx.NewServer()
	if err != nil {
		return nil, err
	}
	messagingApiAPI, err := linebotx.NewClient()
	if err != nil {
		return nil, err
	}
	servicer := newService(injector, server, messagingApiAPI)
	return servicer, nil
}

// wire.go:

func initApplication() (*configx.Application, error) {
	app, err := configx.LoadApplication(&configx.C.PlatformLinebot)
	if err != nil {
		return nil, err
	}

	err = logging.InitWithConfig(app.Log)
	if err != nil {
		return nil, err
	}

	return app, nil
}

var providerSet = wire.NewSet(wire.Struct(new(wirex.Injector), "*"), initApplication, authx.NewNil, linebotx.NewClient, biz.NewNilTodoBiz, httpx.NewServer)
