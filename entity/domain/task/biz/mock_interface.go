// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	model "github.com/blackhorseya/ekko/entity/domain/task/model"
	contextx "github.com/blackhorseya/ekko/pkg/contextx"
	gomock "github.com/golang/mock/gomock"
)

// MockIBiz is a mock of IBiz interface.
type MockIBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIBizMockRecorder
}

// MockIBizMockRecorder is the mock recorder for MockIBiz.
type MockIBizMockRecorder struct {
	mock *MockIBiz
}

// NewMockIBiz creates a new mock instance.
func NewMockIBiz(ctrl *gomock.Controller) *MockIBiz {
	mock := &MockIBiz{ctrl: ctrl}
	mock.recorder = &MockIBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBiz) EXPECT() *MockIBizMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockIBiz) CreateTicket(ctx contextx.Contextx, title string) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, title)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockIBizMockRecorder) CreateTicket(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockIBiz)(nil).CreateTicket), ctx, title)
}

// DeleteTicket mocks base method.
func (m *MockIBiz) DeleteTicket(ctx contextx.Contextx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockIBizMockRecorder) DeleteTicket(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockIBiz)(nil).DeleteTicket), ctx, id)
}

// GetTicketByID mocks base method.
func (m *MockIBiz) GetTicketByID(ctx contextx.Contextx, id string) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, id)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockIBizMockRecorder) GetTicketByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockIBiz)(nil).GetTicketByID), ctx, id)
}

// ListTickets mocks base method.
func (m *MockIBiz) ListTickets(ctx contextx.Contextx, condition ListTicketsCondition) ([]*model.Ticket, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTickets", ctx, condition)
	ret0, _ := ret[0].([]*model.Ticket)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTickets indicates an expected call of ListTickets.
func (mr *MockIBizMockRecorder) ListTickets(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTickets", reflect.TypeOf((*MockIBiz)(nil).ListTickets), ctx, condition)
}

// UpdateTicketStatus mocks base method.
func (m *MockIBiz) UpdateTicketStatus(ctx contextx.Contextx, id string, status model.TicketStatus) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicketStatus", ctx, id, status)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicketStatus indicates an expected call of UpdateTicketStatus.
func (mr *MockIBizMockRecorder) UpdateTicketStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicketStatus", reflect.TypeOf((*MockIBiz)(nil).UpdateTicketStatus), ctx, id, status)
}
