// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	model "github.com/blackhorseya/ekko/entity/domain/task/model"
	contextx "github.com/blackhorseya/ekko/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockITaskBiz is a mock of ITaskBiz interface.
type MockITaskBiz struct {
	ctrl     *gomock.Controller
	recorder *MockITaskBizMockRecorder
}

// MockITaskBizMockRecorder is the mock recorder for MockITaskBiz.
type MockITaskBizMockRecorder struct {
	mock *MockITaskBiz
}

// NewMockITaskBiz creates a new mock instance.
func NewMockITaskBiz(ctrl *gomock.Controller) *MockITaskBiz {
	mock := &MockITaskBiz{ctrl: ctrl}
	mock.recorder = &MockITaskBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskBiz) EXPECT() *MockITaskBizMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockITaskBiz) CreateTicket(ctx contextx.Contextx, title string) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, title)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockITaskBizMockRecorder) CreateTicket(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockITaskBiz)(nil).CreateTicket), ctx, title)
}

// GetTicketByID mocks base method.
func (m *MockITaskBiz) GetTicketByID(ctx contextx.Contextx, id string) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, id)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockITaskBizMockRecorder) GetTicketByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockITaskBiz)(nil).GetTicketByID), ctx, id)
}

// ListTicket mocks base method.
func (m *MockITaskBiz) ListTicket(ctx contextx.Contextx, options ListTicketOptions) ([]*model.Ticket, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTicket", ctx, options)
	ret0, _ := ret[0].([]*model.Ticket)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTicket indicates an expected call of ListTicket.
func (mr *MockITaskBizMockRecorder) ListTicket(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTicket", reflect.TypeOf((*MockITaskBiz)(nil).ListTicket), ctx, options)
}

// UpdateTicket mocks base method.
func (m *MockITaskBiz) UpdateTicket(ctx contextx.Contextx, id string, update *model.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockITaskBizMockRecorder) UpdateTicket(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockITaskBiz)(nil).UpdateTicket), ctx, id, update)
}
