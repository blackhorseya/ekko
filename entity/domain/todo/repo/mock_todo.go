// Code generated by MockGen. DO NOT EDIT.
// Source: todo.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	model "github.com/blackhorseya/ekko/entity/domain/todo/model"
	contextx "github.com/blackhorseya/ekko/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockITodoRepo is a mock of ITodoRepo interface.
type MockITodoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepoMockRecorder
}

// MockITodoRepoMockRecorder is the mock recorder for MockITodoRepo.
type MockITodoRepoMockRecorder struct {
	mock *MockITodoRepo
}

// NewMockITodoRepo creates a new mock instance.
func NewMockITodoRepo(ctrl *gomock.Controller) *MockITodoRepo {
	mock := &MockITodoRepo{ctrl: ctrl}
	mock.recorder = &MockITodoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepo) EXPECT() *MockITodoRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoRepo) Create(ctx contextx.Contextx, item *model.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITodoRepoMockRecorder) Create(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoRepo)(nil).Create), ctx, item)
}

// GetByID mocks base method.
func (m *MockITodoRepo) GetByID(ctx contextx.Contextx, id string) (*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockITodoRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITodoRepo)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockITodoRepo) List(ctx contextx.Contextx, condition ListCondition) ([]*model.Todo, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, condition)
	ret0, _ := ret[0].([]*model.Todo)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockITodoRepoMockRecorder) List(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockITodoRepo)(nil).List), ctx, condition)
}

// Update mocks base method.
func (m *MockITodoRepo) Update(ctx contextx.Contextx, item *model.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITodoRepoMockRecorder) Update(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodoRepo)(nil).Update), ctx, item)
}
