// Code generated by MockGen. DO NOT EDIT.
// Source: issue.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	agg "github.com/blackhorseya/ekko/entity/domain/workflow/agg"
	contextx "github.com/blackhorseya/ekko/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIIssueRepo is a mock of IIssueRepo interface.
type MockIIssueRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIIssueRepoMockRecorder
}

// MockIIssueRepoMockRecorder is the mock recorder for MockIIssueRepo.
type MockIIssueRepoMockRecorder struct {
	mock *MockIIssueRepo
}

// NewMockIIssueRepo creates a new mock instance.
func NewMockIIssueRepo(ctrl *gomock.Controller) *MockIIssueRepo {
	mock := &MockIIssueRepo{ctrl: ctrl}
	mock.recorder = &MockIIssueRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIssueRepo) EXPECT() *MockIIssueRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIIssueRepo) Create(ctx contextx.Contextx, item *agg.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIIssueRepoMockRecorder) Create(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIIssueRepo)(nil).Create), ctx, item)
}

// Delete mocks base method.
func (m *MockIIssueRepo) Delete(ctx contextx.Contextx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIIssueRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIIssueRepo)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockIIssueRepo) GetByID(ctx contextx.Contextx, id string) (*agg.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*agg.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIIssueRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIIssueRepo)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockIIssueRepo) Update(ctx contextx.Contextx, item *agg.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIIssueRepoMockRecorder) Update(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIIssueRepo)(nil).Update), ctx, item)
}
