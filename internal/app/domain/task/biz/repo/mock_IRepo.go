// Code generated by mockery v2.16.0. DO NOT EDIT.

package repo

import (
	contextx "github.com/blackhorseya/todo-app/pkg/contextx"
	mock "github.com/stretchr/testify/mock"

	model "github.com/blackhorseya/todo-app/pkg/entity/domain/task/model"
)

// MockIRepo is an autogenerated mock type for the IRepo type
type MockIRepo struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, condition
func (_m *MockIRepo) Count(ctx contextx.Contextx, condition QueryTasksCondition) (int, error) {
	ret := _m.Called(ctx, condition)

	var r0 int
	if rf, ok := ret.Get(0).(func(contextx.Contextx, QueryTasksCondition) int); ok {
		r0 = rf(ctx, condition)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, QueryTasksCondition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, created
func (_m *MockIRepo) Create(ctx contextx.Contextx, created *model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, created)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *model.Task) *model.Task); ok {
		r0 = rf(ctx, created)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *model.Task) error); ok {
		r1 = rf(ctx, created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *MockIRepo) DeleteByID(ctx contextx.Contextx, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockIRepo) GetByID(ctx contextx.Contextx, id int64) (*model.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64) *model.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, condition
func (_m *MockIRepo) List(ctx contextx.Contextx, condition QueryTasksCondition) ([]*model.Task, error) {
	ret := _m.Called(ctx, condition)

	var r0 []*model.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, QueryTasksCondition) []*model.Task); ok {
		r0 = rf(ctx, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, QueryTasksCondition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updated
func (_m *MockIRepo) Update(ctx contextx.Contextx, updated *model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, updated)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *model.Task) *model.Task); ok {
		r0 = rf(ctx, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *model.Task) error); ok {
		r1 = rf(ctx, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockIRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIRepo creates a new instance of MockIRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIRepo(t mockConstructorTestingTNewMockIRepo) *MockIRepo {
	mock := &MockIRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
