// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	model "github.com/blackhorseya/ekko/entity/domain/task/model"
	contextx "github.com/blackhorseya/ekko/pkg/contextx"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// CountTickets mocks base method.
func (m *MockIRepo) CountTickets(ctx contextx.Contextx, condition ListTicketsCondition) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTickets", ctx, condition)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTickets indicates an expected call of CountTickets.
func (mr *MockIRepoMockRecorder) CountTickets(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTickets", reflect.TypeOf((*MockIRepo)(nil).CountTickets), ctx, condition)
}

// CreateTicket mocks base method.
func (m *MockIRepo) CreateTicket(ctx contextx.Contextx, created *model.Ticket) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, created)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockIRepoMockRecorder) CreateTicket(ctx, created interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockIRepo)(nil).CreateTicket), ctx, created)
}

// DeleteTicketByID mocks base method.
func (m *MockIRepo) DeleteTicketByID(ctx contextx.Contextx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicketByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicketByID indicates an expected call of DeleteTicketByID.
func (mr *MockIRepoMockRecorder) DeleteTicketByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicketByID", reflect.TypeOf((*MockIRepo)(nil).DeleteTicketByID), ctx, id)
}

// GetTicketByID mocks base method.
func (m *MockIRepo) GetTicketByID(ctx contextx.Contextx, id string) (*model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, id)
	ret0, _ := ret[0].(*model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockIRepoMockRecorder) GetTicketByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockIRepo)(nil).GetTicketByID), ctx, id)
}

// ListTickets mocks base method.
func (m *MockIRepo) ListTickets(ctx contextx.Contextx, condition ListTicketsCondition) ([]*model.Ticket, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTickets", ctx, condition)
	ret0, _ := ret[0].([]*model.Ticket)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTickets indicates an expected call of ListTickets.
func (mr *MockIRepoMockRecorder) ListTickets(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTickets", reflect.TypeOf((*MockIRepo)(nil).ListTickets), ctx, condition)
}

// UpdateTicket mocks base method.
func (m *MockIRepo) UpdateTicket(ctx contextx.Contextx, updated *model.Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, updated)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockIRepoMockRecorder) UpdateTicket(ctx, updated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockIRepo)(nil).UpdateTicket), ctx, updated)
}
