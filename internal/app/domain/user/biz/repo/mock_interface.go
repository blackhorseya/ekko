// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	contextx "github.com/blackhorseya/ekko/pkg/contextx"
	model "github.com/blackhorseya/ekko/pkg/entity/domain/user/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// GetProfileByID mocks base method.
func (m *MockIRepo) GetProfileByID(ctx contextx.Contextx, id int64) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByID", ctx, id)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByID indicates an expected call of GetProfileByID.
func (mr *MockIRepoMockRecorder) GetProfileByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByID", reflect.TypeOf((*MockIRepo)(nil).GetProfileByID), ctx, id)
}

// GetProfileByUsername mocks base method.
func (m *MockIRepo) GetProfileByUsername(ctx contextx.Contextx, username string) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByUsername", ctx, username)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByUsername indicates an expected call of GetProfileByUsername.
func (mr *MockIRepoMockRecorder) GetProfileByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUsername", reflect.TypeOf((*MockIRepo)(nil).GetProfileByUsername), ctx, username)
}

// Register mocks base method.
func (m *MockIRepo) Register(ctx contextx.Contextx, who *model.Profile) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, who)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIRepoMockRecorder) Register(ctx, who interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIRepo)(nil).Register), ctx, who)
}

// UpdateToken mocks base method.
func (m *MockIRepo) UpdateToken(ctx contextx.Contextx, who *model.Profile, token string) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", ctx, who, token)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockIRepoMockRecorder) UpdateToken(ctx, who, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockIRepo)(nil).UpdateToken), ctx, who, token)
}
