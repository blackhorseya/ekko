// Code generated by mockery v2.14.0. DO NOT EDIT.

package todo

import (
	contextx "github.com/blackhorseya/gocommon/pkg/contextx"
	entitytodo "github.com/blackhorseya/todo-app/internal/pkg/entity/todo"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/blackhorseya/todo-app/pb"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockITodoBiz is an autogenerated mock type for the ITodoBiz type
type MockITodoBiz struct {
	mock.Mock
}

// ChangeTitle provides a mock function with given fields: ctx, id, title
func (_m *MockITodoBiz) ChangeTitle(ctx contextx.Contextx, id primitive.ObjectID, title string) (*entitytodo.Task, error) {
	ret := _m.Called(ctx, id, title)

	var r0 *entitytodo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, primitive.ObjectID, string) *entitytodo.Task); ok {
		r0 = rf(ctx, id, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entitytodo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, primitive.ObjectID, string) error); ok {
		r1 = rf(ctx, id, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, title
func (_m *MockITodoBiz) Create(ctx contextx.Contextx, title string) (*entitytodo.Task, error) {
	ret := _m.Called(ctx, title)

	var r0 *entitytodo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *entitytodo.Task); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entitytodo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockITodoBiz) Delete(ctx contextx.Contextx, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockITodoBiz) GetByID(ctx contextx.Contextx, id primitive.ObjectID) (*entitytodo.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *entitytodo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, primitive.ObjectID) *entitytodo.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entitytodo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, start, end
func (_m *MockITodoBiz) List(ctx contextx.Contextx, start int, end int) ([]*entitytodo.Task, int, error) {
	ret := _m.Called(ctx, start, end)

	var r0 []*entitytodo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int, int) []*entitytodo.Task); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entitytodo.Task)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int, int) int); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(contextx.Contextx, int, int) error); ok {
		r2 = rf(ctx, start, end)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *MockITodoBiz) UpdateStatus(ctx contextx.Contextx, id primitive.ObjectID, status pb.TaskStatus) (*entitytodo.Task, error) {
	ret := _m.Called(ctx, id, status)

	var r0 *entitytodo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, primitive.ObjectID, pb.TaskStatus) *entitytodo.Task); ok {
		r0 = rf(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entitytodo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, primitive.ObjectID, pb.TaskStatus) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockITodoBiz interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockITodoBiz creates a new instance of MockITodoBiz. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockITodoBiz(t mockConstructorTestingTNewMockITodoBiz) *MockITodoBiz {
	mock := &MockITodoBiz{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
