// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/gocommon/pkg/contextx"
	mock "github.com/stretchr/testify/mock"

	pb "github.com/blackhorseya/todo-app/pb"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	todo "github.com/blackhorseya/todo-app/internal/pkg/entity/todo"
)

// IBiz is an autogenerated mock type for the IBiz type
type IBiz struct {
	mock.Mock
}

// ChangeTitle provides a mock function with given fields: ctx, id, title
func (_m *IBiz) ChangeTitle(ctx contextx.Contextx, id primitive.ObjectID, title string) (*todo.Task, error) {
	ret := _m.Called(ctx, id, title)

	var r0 *todo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, primitive.ObjectID, string) *todo.Task); ok {
		r0 = rf(ctx, id, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, primitive.ObjectID, string) error); ok {
		r1 = rf(ctx, id, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, title
func (_m *IBiz) Create(ctx contextx.Contextx, title string) (*todo.Task, error) {
	ret := _m.Called(ctx, title)

	var r0 *todo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *todo.Task); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IBiz) Delete(ctx contextx.Contextx, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IBiz) GetByID(ctx contextx.Contextx, id primitive.ObjectID) (*todo.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *todo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, primitive.ObjectID) *todo.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, start, end
func (_m *IBiz) List(ctx contextx.Contextx, start int, end int) ([]*todo.Task, int, error) {
	ret := _m.Called(ctx, start, end)

	var r0 []*todo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int, int) []*todo.Task); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*todo.Task)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int, int) int); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(contextx.Contextx, int, int) error); ok {
		r2 = rf(ctx, start, end)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *IBiz) UpdateStatus(ctx contextx.Contextx, id primitive.ObjectID, status pb.TaskStatus) (*todo.Task, error) {
	ret := _m.Called(ctx, id, status)

	var r0 *todo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, primitive.ObjectID, pb.TaskStatus) *todo.Task); ok {
		r0 = rf(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, primitive.ObjectID, pb.TaskStatus) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
