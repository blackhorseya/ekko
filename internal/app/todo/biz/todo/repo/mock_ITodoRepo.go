// Code generated by mockery v2.14.0. DO NOT EDIT.

package repo

import (
	contextx "github.com/blackhorseya/gocommon/pkg/contextx"
	mock "github.com/stretchr/testify/mock"

	ticket "github.com/blackhorseya/todo-app/internal/pkg/entity/ticket"
)

// MockITodoRepo is an autogenerated mock type for the ITodoRepo type
type MockITodoRepo struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, condition
func (_m *MockITodoRepo) Count(ctx contextx.Contextx, condition QueryTodoCondition) (int, error) {
	ret := _m.Called(ctx, condition)

	var r0 int
	if rf, ok := ret.Get(0).(func(contextx.Contextx, QueryTodoCondition) int); ok {
		r0 = rf(ctx, condition)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, QueryTodoCondition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, created
func (_m *MockITodoRepo) Create(ctx contextx.Contextx, created *ticket.Task) (*ticket.Task, error) {
	ret := _m.Called(ctx, created)

	var r0 *ticket.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *ticket.Task) *ticket.Task); ok {
		r0 = rf(ctx, created)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ticket.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *ticket.Task) error); ok {
		r1 = rf(ctx, created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockITodoRepo) GetByID(ctx contextx.Contextx, id uint64) (*ticket.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *ticket.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, uint64) *ticket.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ticket.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, condition
func (_m *MockITodoRepo) List(ctx contextx.Contextx, condition QueryTodoCondition) ([]*ticket.Task, error) {
	ret := _m.Called(ctx, condition)

	var r0 []*ticket.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, QueryTodoCondition) []*ticket.Task); ok {
		r0 = rf(ctx, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ticket.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, QueryTodoCondition) error); ok {
		r1 = rf(ctx, condition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, id
func (_m *MockITodoRepo) Remove(ctx contextx.Contextx, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, updated
func (_m *MockITodoRepo) Update(ctx contextx.Contextx, updated *ticket.Task) (*ticket.Task, error) {
	ret := _m.Called(ctx, updated)

	var r0 *ticket.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *ticket.Task) *ticket.Task); ok {
		r0 = rf(ctx, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ticket.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *ticket.Task) error); ok {
		r1 = rf(ctx, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockITodoRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockITodoRepo creates a new instance of MockITodoRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockITodoRepo(t mockConstructorTestingTNewMockITodoRepo) *MockITodoRepo {
	mock := &MockITodoRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
