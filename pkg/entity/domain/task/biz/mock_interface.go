// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	contextx "github.com/blackhorseya/ekko/pkg/contextx"
	model "github.com/blackhorseya/ekko/pkg/entity/domain/task/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIBiz is a mock of IBiz interface.
type MockIBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIBizMockRecorder
}

// MockIBizMockRecorder is the mock recorder for MockIBiz.
type MockIBizMockRecorder struct {
	mock *MockIBiz
}

// NewMockIBiz creates a new mock instance.
func NewMockIBiz(ctrl *gomock.Controller) *MockIBiz {
	mock := &MockIBiz{ctrl: ctrl}
	mock.recorder = &MockIBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBiz) EXPECT() *MockIBizMockRecorder {
	return m.recorder
}

// ChangeTitle mocks base method.
func (m *MockIBiz) ChangeTitle(ctx contextx.Contextx, id int64, title string) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTitle", ctx, id, title)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTitle indicates an expected call of ChangeTitle.
func (mr *MockIBizMockRecorder) ChangeTitle(ctx, id, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTitle", reflect.TypeOf((*MockIBiz)(nil).ChangeTitle), ctx, id, title)
}

// Create mocks base method.
func (m *MockIBiz) Create(ctx contextx.Contextx, title string) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, title)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIBizMockRecorder) Create(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBiz)(nil).Create), ctx, title)
}

// Delete mocks base method.
func (m *MockIBiz) Delete(ctx contextx.Contextx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBizMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBiz)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockIBiz) GetByID(ctx contextx.Contextx, id int64) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIBizMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIBiz)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockIBiz) List(ctx contextx.Contextx, page, size int) ([]*model.Task, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, page, size)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIBizMockRecorder) List(ctx, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIBiz)(nil).List), ctx, page, size)
}

// Liveness mocks base method.
func (m *MockIBiz) Liveness(ctx contextx.Contextx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Liveness", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Liveness indicates an expected call of Liveness.
func (mr *MockIBizMockRecorder) Liveness(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockIBiz)(nil).Liveness), ctx)
}

// Readiness mocks base method.
func (m *MockIBiz) Readiness(ctx contextx.Contextx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readiness", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Readiness indicates an expected call of Readiness.
func (mr *MockIBizMockRecorder) Readiness(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockIBiz)(nil).Readiness), ctx)
}

// UpdateStatus mocks base method.
func (m *MockIBiz) UpdateStatus(ctx contextx.Contextx, id int64, status model.TaskStatus) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIBizMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIBiz)(nil).UpdateStatus), ctx, id, status)
}
