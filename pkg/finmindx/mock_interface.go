// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package finmindx is a generated GoMock package.
package finmindx

import (
	reflect "reflect"
	time "time"

	contextx "github.com/blackhorseya/ekko/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockDialer is a mock of Dialer interface.
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
}

// MockDialerMockRecorder is the mock recorder for MockDialer.
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance.
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockDialer) Do(ctx contextx.Contextx, dataset string, params map[string]string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, dataset, params, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockDialerMockRecorder) Do(ctx, dataset, params, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDialer)(nil).Do), ctx, dataset, params, v)
}

// TaiwanStockInfo mocks base method.
func (m *MockDialer) TaiwanStockInfo(ctx contextx.Contextx) ([]*TaiwanStockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaiwanStockInfo", ctx)
	ret0, _ := ret[0].([]*TaiwanStockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaiwanStockInfo indicates an expected call of TaiwanStockInfo.
func (mr *MockDialerMockRecorder) TaiwanStockInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaiwanStockInfo", reflect.TypeOf((*MockDialer)(nil).TaiwanStockInfo), ctx)
}

// TaiwanStockPrice mocks base method.
func (m *MockDialer) TaiwanStockPrice(ctx contextx.Contextx, symbol string, start, end time.Time) (*TaiwanStockPriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaiwanStockPrice", ctx, symbol, start, end)
	ret0, _ := ret[0].(*TaiwanStockPriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaiwanStockPrice indicates an expected call of TaiwanStockPrice.
func (mr *MockDialerMockRecorder) TaiwanStockPrice(ctx, symbol, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaiwanStockPrice", reflect.TypeOf((*MockDialer)(nil).TaiwanStockPrice), ctx, symbol, start, end)
}

// TaiwanStockPriceV2 mocks base method.
func (m *MockDialer) TaiwanStockPriceV2(ctx contextx.Contextx, symbol string, start, end time.Time) ([]*TaiwanStockPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaiwanStockPriceV2", ctx, symbol, start, end)
	ret0, _ := ret[0].([]*TaiwanStockPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaiwanStockPriceV2 indicates an expected call of TaiwanStockPriceV2.
func (mr *MockDialerMockRecorder) TaiwanStockPriceV2(ctx, symbol, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaiwanStockPriceV2", reflect.TypeOf((*MockDialer)(nil).TaiwanStockPriceV2), ctx, symbol, start, end)
}
